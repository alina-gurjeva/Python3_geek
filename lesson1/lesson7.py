from abc import ABC, abstractmethod  # для Задания 2

print('Task1')
'''
Реализовать класс Matrix (матрица).
Обеспечить перегрузку конструктора класса (метод __init__()),
который должен принимать данные (список списков) для формирования матрицы.
Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.

Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
Далее реализовать перегрузку метода __add__()
для реализации операции сложения двух объектов класса Matrix (двух матриц).
Результатом сложения должна быть новая матрица.
Подсказка: сложение элементов матриц выполнять поэлементно —
первый элемент первой строки первой матрицы складываем с первым элементом первой строки второй матрицы и т.д.

'''


# Скорее всего numpy использовать нельзя
class Matrix:
    def __init__(self, lst_of_lst: list):
        self.matrix = lst_of_lst

    def __str__(self):
        for x in self.matrix:  # печатаем списки друг под другом - получается матричный вид
            return '\n'.join([f'{self.matrix[i]}' for i in range(len(self.matrix))])

    def __add__(self, other):
        result = []
        for i in range(len(self.matrix)):
            result.append([self.matrix[i][j] + other.matrix[i][j] for j in range(len(self.matrix[0]))])
        return Matrix(result)


matrix = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(matrix)
print('add')
print(matrix+matrix)

print('Task2')
'''
Реализовать проект расчета суммарного расхода ткани на производство одежды.
Основная сущность (класс) этого проекта — одежда,
которая может иметь определенное название.
К типам одежды в этом проекте относятся пальто и костюм.
У этих типов одежды существуют параметры: размер (для пальто) и рост (для костюма).
Это могут быть обычные числа: V и H, соответственно.
Для определения расхода ткани по каждому типу одежды использовать формулы:
для пальто (V/6.5 + 0.5), для костюма (2*H + 0.3). Проверить работу этих методов на реальных данных.

Реализовать общий подсчет расхода ткани.
Проверить на практике полученные на этом уроке знания:
реализовать абстрактные классы для основных классов проекта,
проверить на практике работу декоратора @property.

'''

'''!
Задание сформулировано не прозрачно.
Решение реализовано исходя из следующего понимания:
"расчета суммарного расхода ткани на производство одежды" - имеется в виду, что у нас
n одежды типа пальто и m одежды типа костюм, каждый экземпляр своего размера, и мы их добавляем.
И надо реализовать метод подсчета, сколько всего ушло ткани на все производство.
!
Также вообще не ясно, причем тут абстрактные классы, зачем они здесь нужны.
Реализовала решение так, только из-за этого условия, считаю его не эффективным.
Можно было обойтись в 2 раза меньшим количеством кода и без лишних классов.
'''


class Material(ABC):
    @abstractmethod
    def count_material(self):
        pass


class Coat(Material):
    def __init__(self, v, n=1):
        self.v = v
        self.n = n

    @property
    def count_material(self):
        return (self.v / 6.5 + 0.5) * self.n


class Costume(Material):
    def __init__(self, h, n=1):
        self.h = h
        self.n = n

    @property
    def count_material(self):
        return (self.h * 2 + 0.3) * self.n


class Cloths:
    general_material = 0

    def add_new_coat(self, v, n=1):
        self.general_material += Coat(v, n).count_material

    def add_new_costume(self, h, n=1):
        self.general_material += Costume(h, n).count_material


cloths = Cloths()
cloths.add_new_coat(56, 2)
cloths.add_new_coat(48, 3)
cloths.add_new_coat(42)
cloths.add_new_costume(42, 2)
cloths.add_new_costume(50, 5)
cloths.add_new_costume(46)
cloths.add_new_costume(40, 2)
cloths.add_new_costume(48, 10)

print(cloths.general_material)

print('Task3')
'''
Реализовать программу работы с органическими клетками, состоящими из ячеек. 
Необходимо создать класс Клетка. 
В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). 

В классе должны быть реализованы методы перегрузки арифметических операторов: 
сложение (__add__()), 
вычитание (__sub__()), 
умножение (__mul__()), 
деление (__truediv__()). 

Данные методы должны применяться только к клеткам и выполнять увеличение, 
уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.

Сложение. Объединение двух клеток. 
При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.

Вычитание. Участвуют две клетки. 
Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, 
иначе выводить соответствующее сообщение.

Умножение. Создается общая клетка из двух. 
Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.

Деление. Создается общая клетка из двух. 
Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.

В классе необходимо реализовать метод make_order(), 
принимающий экземпляр класса и количество ячеек в ряду. 
Данный метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., 
где количество ячеек между \n равно переданному аргументу. 
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.

Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. 
Тогда метод make_order() вернет строку: 
*****
*****
**

Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. 
Тогда метод make_order() вернет строку: 
*****
*****
*****
'''

'''!
Задание хорошее, мне нравится. 
Единственное, есть неточность в условии по делению: не указано, что должно вернуть, 
если делимое меньше делителя. Очевидно, целочисленное деление вернет 0. 
Учитывая, что про исключение в этом случае ничего не сказано - значит, 0.
'''


class Cell:
    def __init__(self, n: int):
        if type(n) != int or n < 0:  # 0 включаем из-за непрозрачности условия, см. выше
            raise Exception('Число ячеек должно быть не отрицательным целым числом')
        self.n = n

    def __add__(self, other):
        return Cell(self.n + other.n)

    def __sub__(self, other):
        if self.n < other.n:
            raise Exception('Количество ячеек второй клетки должно быть строго меньше первой для этой'
                            ' операции')
        return Cell(self.n - other.n)

    def __mul__(self, other):
        return Cell(self.n * other.n)

    def __truediv__(self, other):
        return Cell(self.n // other.n)

    def make_order(self, k):
        ordered_cell = ''
        if k == 0 or self.n == 0:
            return ''
        for i in range(self.n // k):
            ordered_cell += ('*' * k + '\n')
        ordered_cell += '*'*(self.n % k)
        return ordered_cell


cell = Cell(10)
print(cell.make_order(7))

print(cell.__mul__(Cell(20)).n)
print(cell.__add__(Cell(20)).n)
print(cell.__truediv__(Cell(20)).n)
print(cell.__sub__(Cell(5)).n)
